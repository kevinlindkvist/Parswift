//
//  errors.swift
//  Parsec
//
//  Created by Kevin Lindkvist on 1/28/17.
//  Copyright Â© 2017 lindkvist. All rights reserved.
//

import Foundation

public struct ParseError {
  let position: SourcePosition
  let messages: [ErrorMessage]
}

public enum ErrorMessage {
  /// A message that is automatically generated by `satisfy` where the argument is the unexpected input.
  case systemUnexpected(String)
  /// A message generated by `unexpected` combinator where the argument describes the unexpected item.
  case unexpected(String)
  /// A message generated by `<?>` where the argument describes the expected item.
  case expected(String)
  /// A raw message generated by the `fail` combinator.
  case message(String)
}

func merge(firstError: ParseError, secondError: ParseError) -> ParseError {
  switch (firstError.messages.count, secondError.messages.count) {
  case let (a, 0) where a > 0: return firstError
  case let (a, b) where a > b: return firstError
  case let (0, b) where b > 0: return secondError
  case let (a, b) where b > a: return secondError
  default: return ParseError(position: firstError.position, messages: firstError.messages + secondError.messages)
  }
}

func unknownError<Input: Collection, UserState> (state: State<Input, UserState>) -> ParseError {
  return ParseError(position: state.position, messages: [])
}
